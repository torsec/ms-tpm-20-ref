
// This file is not built, but is provided as an example for a library that doesn't use
// bignum_t as the primary format.  This file initializes the ECC constants as native
// TPM2B structures. The file extension is not .C so it is not found by the automake
// build which dynamically generates the file list.

//** Introduction
// This file maintains a TPM2B format for ECC Constants, though it is not clear it was ever
// used by any released version of the reference code.  In order to reduce the complexity
// in the bignum format, which is used, this was extracted here for reference and future
// consideration.

#include "Tpm.h"
#include "OIDs.h"

#if ALG_ECC

// define macros expected by EccConstantData to convert the data to BigNum format
#  define TO_ECC_64(a, b, c, d, e, f, g, h) a, b, c, d, e, f, g, h
#  define TO_ECC_56(a, b, c, d, e, f, g)    a, b, c, d, e, f, g
#  define TO_ECC_48(a, b, c, d, e, f)       a, b, c, d, e, f
#  define TO_ECC_40(a, b, c, d, e)          a, b, c, d, e
#  define TO_ECC_32(a, b, c, d)             a, b, c, d
#  define TO_ECC_24(a, b, c)                a, b, c
#  define TO_ECC_16(a, b)                   a, b
#  define TO_ECC_8(a)                       a

TPM2B_BYTE_VALUE(24);
#  define TO_ECC_192(a, b, c) a, b, c
TPM2B_BYTE_VALUE(28);
#  define TO_ECC_224(a, b, c, d) a, b, c, d
TPM2B_BYTE_VALUE(32);
#  define TO_ECC_256(a, b, c, d) a, b, c, d
TPM2B_BYTE_VALUE(48);
#  define TO_ECC_384(a, b, c, d, e, f) a, b, c, d, e, f
TPM2B_BYTE_VALUE(66);
#  define TO_ECC_528(a, b, c, d, e, f, g, h, i) a, b, c, d, e, f, g, h, i
TPM2B_BYTE_VALUE(80);
#  define TO_ECC_640(a, b, c, d, e, f, g, h, i, j) a, b, c, d, e, f, g, h, i, j

TPM2B_BYTE_VALUE(1);

#  define ECC_CONST(name, bytes, initializer) \
    const TPM2B_##bytes##_BYTE_VALUE name = {bytes, {initializer}}

// This file contains the ECC curve data. The data is contained in macros so this
// file can be included in other files that format the data in a memory format
// desired by the user.  This file itself is never used alone.
#  include "EccConstantData.inl"

typedef struct
{
    const TPM2B* prime;  // a prime number
    const TPM2B* order;  // the order of the curve
    const TPM2B* h;      // cofactor
    const TPM2B* a;      // linear coefficient
    const TPM2B* b;      // constant term
    const TPM2B* baseX;  // base point - X
    const TPM2B* baseY;  // base point - Y
    const TPM2B* baseZ;  // base point - Z
} TPM2B_ECC_CURVE_CONSTANTS;

#  if ECC_NIST_P192
const TPM2B_ECC_CURVE_CONSTANTS NIST_P192 =
    {&NIST_P192_p.b,
     &NIST_P192_n.b,
     &NIST_P192_h.b,
     &NIST_P192_a.b,
     &NIST_P192_b.b,
     &NIST_P192_gX.b,
     &NIST_P192_gY.b,
     &NIST_P192_gZ.b};
#  endif  // ECC_NIST_P192

#  if ECC_NIST_P224
const TPM2B_ECC_CURVE_CONSTANTS NIST_P224 =
    {&NIST_P224_p.b,
     &NIST_P224_n.b,
     &NIST_P224_h.b,
     &NIST_P224_a.b,
     &NIST_P224_b.b,
     &NIST_P224_gX.b,
     &NIST_P224_gY.b,
     &NIST_P224_gZ.b};
#  endif  // ECC_NIST_P224

#  if ECC_NIST_P256
const TPM2B_ECC_CURVE_CONSTANTS NIST_P256 =
    {&NIST_P256_p.b,
     &NIST_P256_n.b,
     &NIST_P256_h.b,
     &NIST_P256_a.b,
     &NIST_P256_b.b,
     &NIST_P256_gX.b,
     &NIST_P256_gY.b,
     &NIST_P256_gZ.b};
#  endif  // ECC_NIST_P256

#  if ECC_NIST_P384
const TPM2B_ECC_CURVE_CONSTANTS NIST_P384 =
    {&NIST_P384_p.b,
     &NIST_P384_n.b,
     &NIST_P384_h.b,
     &NIST_P384_a.b,
     &NIST_P384_b.b,
     &NIST_P384_gX.b,
     &NIST_P384_gY.b,
     &NIST_P384_gZ.b};
#  endif  // ECC_NIST_P384

#  if ECC_NIST_P521
const TPM2B_ECC_CURVE_CONSTANTS NIST_P521 =
    {&NIST_P521_p.b,
     &NIST_P521_n.b,
     &NIST_P521_h.b,
     &NIST_P521_a.b,
     &NIST_P521_b.b,
     &NIST_P521_gX.b,
     &NIST_P521_gY.b,
     &NIST_P521_gZ.b};
#  endif  // ECC_NIST_P521

#  if ECC_BN_P256
const TPM2B_ECC_CURVE_CONSTANTS BN_P256 =
    {&BN_P256_p.b,
     &BN_P256_n.b,
     &BN_P256_h.b,
     &BN_P256_a.b,
     &BN_P256_b.b,
     &BN_P256_gX.b,
     &BN_P256_gY.b,
     &BN_P256_gZ.b};
#  endif  // ECC_BN_P256

#  if ECC_BN_P638
const TPM2B_ECC_CURVE_CONSTANTS BN_P638 =
    {&BN_P638_p.b,
     &BN_P638_n.b,
     &BN_P638_h.b,
     &BN_P638_a.b,
     &BN_P638_b.b,
     &BN_P638_gX.b,
     &BN_P638_gY.b,
     &BN_P638_gZ.b};
#  endif  // ECC_BN_P638

#  if ECC_SM2_P256
const TPM2B_ECC_CURVE_CONSTANTS SM2_P256 =
    {&SM2_P256_p.b,
     &SM2_P256_n.b,
     &SM2_P256_h.b,
     &SM2_P256_a.b,
     &SM2_P256_b.b,
     &SM2_P256_gX.b,
     &SM2_P256_gY.b,
     &SM2_P256_gZ.b};
#  endif  // ECC_SM2_P256

#endif  // TPM_ALG_ECC
#endif  // zero